<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[A Large Tin Box]]></title>
  <link href="http://robertsawko.github.io/atom.xml" rel="self"/>
  <link href="http://robertsawko.github.io/"/>
  <updated>2015-05-11T19:01:36+01:00</updated>
  <id>http://robertsawko.github.io/</id>
  <author>
    <name><![CDATA[Robert Sawko]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Introduction to Numerical Solutions of Population Balance Equation]]></title>
    <link href="http://robertsawko.github.io/blog/2015/05/10/introduction-to-numerical-solutions-of-population-balance-equation/"/>
    <updated>2015-05-10T16:04:58+01:00</updated>
    <id>http://robertsawko.github.io/blog/2015/05/10/introduction-to-numerical-solutions-of-population-balance-equation</id>
    <content type="html"><![CDATA[<h2 id="introduction">Introduction</h2>

<p><a href="http://en.wikipedia.org/wiki/Population_balance_equation">Population balance equation</a> (PBE)
allows us to quantify the change of distribution of a single or a set of
descriptors in a sample population. <a href="http://en.wikipedia.org/wiki/Smoluchowski_coagulation_equation">Seminal work</a> in PBE
was done by <a href="http://en.wikipedia.org/wiki/Marian_Smoluchowski">Marian Smoluchowski</a>, who was a
Polish scientist working on the foundations of statistical physics. A typical
application in fluid dynamics context is a size distribution of a dispersion
such as those encountered in gas-liquid or liquid-liquid flows where bubbles or
drops play the role of the sample population. The methodology is more general
though and has been used in other branches of modern science in order to study
polymerization, biological cells or as models of ecosystems. Also, Lattice
Boltzmann numerical techniques are based on this methodology. We are focused
here on the fluid dynamic application and PBE will be used in order to capture
the change of volume  due to breakup and coalescence processes in bubbles or
drops.</p>

<p>PBE are a set of integro-differential equations derived from Boltzmann equation
for the number density function describing the size. The interaction term
captures the coalescence and breakup processes through integrals over breakup
or coalescence rates and the density function itself. For certain forms of
these kernel functions equations can be solved analytically, but with the
advent of computational methods it is also possible to obtain numerical
approximations to the solutions of kernels of more general type.</p>

<p>In this post I will show a comparison of analytical solutions for pure breakup
and pure coalescence cases. We discretise continuous PBE equations with finite
volume and the choice of internal variable grid follows Hidy and Brock (1970)
paper. The comparisons for pure breakage and agglomeration replicate the PBE
testing reported in paper by Kumar and Ramkrishna (1996).</p>

<p>The exercise is performed in order to develop a calculation tool with simple
python interface. The tests were a side product of other projects that I am
running at the moment.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">numpy</span> <span class="kn">import</span> <span class="n">arange</span><span class="p">,</span> <span class="n">zeros</span><span class="p">,</span> <span class="n">exp</span><span class="p">,</span> <span class="n">trapz</span><span class="p">,</span> <span class="n">piecewise</span><span class="p">,</span> <span class="n">linspace</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">scipy.integrate</span> <span class="kn">import</span> <span class="n">odeint</span>
</span><span class="line"><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">cycle</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib</span> <span class="kn">as</span> <span class="nn">mpl</span>
</span><span class="line"><span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="kn">as</span> <span class="nn">plt</span>
</span><span class="line"><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="population-balance-equations">Population balance equations</h2>

<h3 id="continuous-equations">Continuous equations</h3>

<p>A recent review by Solsvik and Jakobsen (2015) gives three alternative ways of
deriving population balance equations: through continuum dynamics, from
Boltzmann equation and through probabilistic arguments. We begin here by
assuming that these equations are known and that for bubbles or drops we
can formulate them in terms of particle volume. Volume is convenient as it is a
conserved quantity in breakage and coalescence processes. If $v$ is particle
volume and $n(v,t)$ denotes the number density function then the continuous set
of PBE are</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\frac{\partial n(v,t)}{\partial t}
\, = \, &
\frac{1}{2} \int_0^v \! n(v - v', t), n(v',t) Q(v-v', v') \, \mathrm{d} \xi'
\\
& -
\Gamma(v) n(v,t)
\\
& -
\int_0^\infty \! n(v, t) n(v', t) Q(v, v') \, \mathrm{d} v'
\\
& +
\int_v^\infty \beta(v, v') \Gamma(v') n(v', t) \, \mathrm{d} v',
\end{align} %]]&gt;</script>

<p>where $Q$ is coalescence rate, $\Gamma$ is the breakage rate and $\beta$ is the
daughter particle distribution.</p>

<h3 id="discrete-equations">Discrete equations</h3>

<p>We discretise the equation by applying finite volume method. We will be solving
for a fixed number of equations for quantities:</p>

<script type="math/tex; mode=display">\begin{equation}
N_i(t) = \int_{v_i}^{v_{i+1}} \! n(v, t)\, \mathrm{d}v
\end{equation}</script>

<p>which represent the total number of drops of size from $[v_i, v_{i+1})$. This
discretisation became knowns as the method of classes (MOC). The tracked
quantites $N_k$ representing the number of particles belonging to a particular
size class. The full discrete equations are then:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{align}
\frac{\partial N_i(t)}{\partial t}
\, = \, &
\frac{1}{2} \int_{v_i}^{v_{i+1}}\int_0^v \! n(v - v', t)\, n(v',t) Q(v-v', v') \, \mathrm{d} v'\mathrm{d} v
\\
& -
\int_{v_i}^{v_{i+1}} \! \Gamma(v) n(v,t) \, \mathrm{d} v
\\
& -
\int_{v_i}^{v_{i+1}}\int_0^\infty \! n(v, t) n(v', t) Q(v, v') \, \mathrm{d} v' \mathrm{d} v
\\
& +
\int_{v_i}^{v_{i+1}} \int_v^\infty \beta(v, v') \Gamma(v') n(v', t) \, \mathrm{d} v'\mathrm{d} v.
\end{align} %]]&gt;</script>

<p>At this stage a problem of closure arises. The left hand side represents the
change of known values of our system but the right hand side contains integrals
of function $n$ which is unknown.</p>

<p>Hidy and Brook propose a uniform discretisation of the internal space. We fix
the smallest drop size to $v_1$ and a fixed number of classes. Class $k$
represent then the size $v_k = kv_1$.</p>

<p>We will now turn to the closure problem and applying <a href="https://en.wikipedia.org/wiki/Mean_value_theorem#Mean_value_theorems_for_integration]">mean value theorem</a>
to the right hand side terms. For simplicity we will do only the breakage terms
i.e. the second and the fourth terms. For the first term it gives us:</p>

<script type="math/tex; mode=display">\begin{gather}
\int_{v_i}^{v_{i+1}} \! \Gamma(v) n(v,t) \, \mathrm{d} v = \Gamma(\xi) \int_{v_i}^{v_{i+1}} \! n(v,t) \, \mathrm{d} v = \Gamma(\xi) N_i(t)
\end{gather}</script>

<p>for some $\xi \in [v_i, v_{i+1})$. For the fourth term we need to apply mean value theorem for both integrals.</p>

<script type="math/tex; mode=display">\begin{equation}
\int_{v_i}^{v_{i+1}} \int_v^\infty \beta(v, v') \Gamma(v') n(v', t) \, \mathrm{d} v'\mathrm{d}v
\\
=
\int_{v_i}^{v_{i+1}} \sum_j \int_{v_j}^{v_{j+1}} \beta(v, v') \Gamma(v') n(v', t) \, \mathrm{d} v'\mathrm{d}v
\\
= 
\int_{v_i}^{v_{i+1}} \sum_j \beta(v, \xi_j') \Gamma(\xi_j')  \int_{v_j}^{v_{j+1}}n(v', t) \, \mathrm{d} v'\mathrm{d}v
\\ 
=
\int_{v_i}^{v_{i+1}} \sum_j \beta(v, \xi_j') \Gamma(\xi_j') N_j(t) \, \mathrm{d}v
\\
=
(v_{i+1} - v_i) \sum_j \beta(\xi, \xi_j') \Gamma(\xi_j') N_j(t)
\end{equation}</script>

<p>The unkown $\xi$ and $\xi’$ values could now be selected in order for the equalities to hold. However, we cannot choose these values for arbitrary functions. In here we will somehwat arbitrarily set these unkowns to left sides of each interval and assume that the functions do not vary signficantly. The equalities will only hold approximately, but  the accuracy of approximation can be increased with increased resolution. For pure breakage case the equations are now:</p>

<p>\begin{equation}
\frac{\partial N_i(t)}{\partial t} 
=
-N_i(t) \Gamma_i
+ (v_{i+1} - v_{i}) \sum_{j=i+1}^{M} \beta_{i,j} \Gamma_j N_j
\end{equation}</p>

<p>where the indexed values are simply the values of kernel functions at the left side of each interval. Similar derivation can be made for coalescence. See for instance Kumar and Ramkrishna (1996) paper. You can find the current version of my PBE code in my <a href="https://github.com/robertsawko/pyfd">pyfd</a> repository. The code is quite straighforward and python <code>odeint</code> interface is used to solve the ordinary differential equation that arises after discretisation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">class</span> <span class="nc">MOCSolution</span><span class="p">:</span>
</span><span class="line">    <span class="k">def</span> <span class="nf">RHS</span><span class="p">(</span>
</span><span class="line">        <span class="bp">self</span><span class="p">,</span> <span class="n">N</span><span class="p">,</span> <span class="n">t</span>
</span><span class="line">    <span class="p">):</span>
</span><span class="line">        <span class="n">dNdt</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">gamma</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span> <span class="ow">and</span> <span class="bp">self</span><span class="o">.</span><span class="n">beta</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="c"># Death breakup term</span>
</span><span class="line">            <span class="n">dNdt</span> <span class="o">-=</span> <span class="n">N</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">gamma</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">)</span>
</span><span class="line">            <span class="c"># Birth breakup term</span>
</span><span class="line">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">):</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">arange</span><span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">,</span> <span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">):</span>
</span><span class="line">                    <span class="n">dNdt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> \
</span><span class="line">                        <span class="bp">self</span><span class="o">.</span><span class="n">beta</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> \
</span><span class="line">                        <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">gamma</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">j</span><span class="p">])</span> \
</span><span class="line">                        <span class="o">*</span> <span class="n">N</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">delta_xi</span>
</span><span class="line">
</span><span class="line">        <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">Q</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">            <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">):</span>
</span><span class="line">                <span class="c"># Birth coalescence term</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">i</span><span class="p">):</span>
</span><span class="line">                    <span class="n">dNdt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">+=</span> <span class="mf">0.5</span> <span class="o">*</span> <span class="n">N</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> \
</span><span class="line">                        <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">Q</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">j</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">i</span> <span class="o">-</span> <span class="n">j</span><span class="p">])</span>
</span><span class="line">                <span class="c"># Death coalescence term</span>
</span><span class="line">                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">):</span>
</span><span class="line">                    <span class="n">dNdt</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">-=</span> <span class="n">N</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">*</span> <span class="n">N</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">*</span> <span class="bp">self</span><span class="o">.</span><span class="n">Q</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="bp">self</span><span class="o">.</span><span class="n">xi</span><span class="p">[</span><span class="n">j</span><span class="p">])</span>
</span><span class="line">        <span class="k">return</span> <span class="n">dNdt</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">N0</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">xi0</span><span class="p">,</span> <span class="n">beta</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">gamma</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">Q</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span> <span class="o">=</span> <span class="n">N0</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
</span><span class="line">        <span class="c"># Kernels setup</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">beta</span> <span class="o">=</span> <span class="n">beta</span>  <span class="c"># Daughter particle distribution</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">gamma</span> <span class="o">=</span> <span class="n">gamma</span>  <span class="c"># Breakup frequency</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">Q</span> <span class="o">=</span> <span class="n">Q</span>  <span class="c">#</span>
</span><span class="line">        <span class="c"># Uniform grid</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">xi</span> <span class="o">=</span> <span class="n">xi0</span> <span class="o">+</span> <span class="n">xi0</span> <span class="o">*</span> <span class="n">arange</span><span class="p">(</span><span class="bp">self</span><span class="o">.</span><span class="n">number_of_classes</span><span class="p">)</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">delta_xi</span> <span class="o">=</span> <span class="n">xi0</span>
</span><span class="line">        <span class="c"># Solve procedure</span>
</span><span class="line">        <span class="bp">self</span><span class="o">.</span><span class="n">N</span> <span class="o">=</span> <span class="n">odeint</span><span class="p">(</span><span class="k">lambda</span> <span class="n">NN</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="bp">self</span><span class="o">.</span><span class="n">RHS</span><span class="p">(</span><span class="n">NN</span><span class="p">,</span> <span class="n">t</span><span class="p">),</span> <span class="n">N0</span><span class="p">,</span> <span class="n">t</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="numerical-experiments">Numerical experiments</h2>

<p>In this section we will draw some comparisons on log-log and semilog plots that
will show analytical and numerical solutions. I am using <code>ggplot</code> style with
some minor alterations. To minimize code duplication I create two functions.
<code>pbe_solutions</code> variable is assumed here to be a dictionary holding grid sizes.</p>

<p>Note that in function <code>plot_pbe_solutions</code> in order to reconstruct the number
density function of the continuous formulation you need to divide the values
$N_k$ by the grid size or interval over which original NDF was integrated. You
assume that this ratio is the mean value of the original NDF.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
<span class="line-number">34</span>
<span class="line-number">35</span>
<span class="line-number">36</span>
<span class="line-number">37</span>
<span class="line-number">38</span>
<span class="line-number">39</span>
<span class="line-number">40</span>
<span class="line-number">41</span>
<span class="line-number">42</span>
<span class="line-number">43</span>
<span class="line-number">44</span>
<span class="line-number">45</span>
<span class="line-number">46</span>
<span class="line-number">47</span>
<span class="line-number">48</span>
<span class="line-number">49</span>
<span class="line-number">50</span>
<span class="line-number">51</span>
<span class="line-number">52</span>
<span class="line-number">53</span>
<span class="line-number">54</span>
<span class="line-number">55</span>
<span class="line-number">56</span>
<span class="line-number">57</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">mpl</span><span class="o">.</span><span class="n">style</span><span class="o">.</span><span class="n">use</span><span class="p">(</span><span class="s">&#39;ggplot&#39;</span><span class="p">)</span>
</span><span class="line"><span class="n">plt</span><span class="o">.</span><span class="n">rcParams</span><span class="o">.</span><span class="n">update</span><span class="p">({</span>
</span><span class="line">    <span class="s">&#39;axes.labelsize&#39;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;xtick.labelsize&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;ytick.labelsize&#39;</span><span class="p">:</span> <span class="mi">12</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;legend.fontsize&#39;</span><span class="p">:</span> <span class="mi">16</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;axes.labelcolor&#39;</span><span class="p">:</span> <span class="s">&#39;black&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;ytick.color&#39;</span><span class="p">:</span> <span class="s">&#39;black&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;xtick.color&#39;</span><span class="p">:</span> <span class="s">&#39;black&#39;</span><span class="p">,</span>
</span><span class="line">    <span class="s">&#39;figure.figsize&#39;</span><span class="p">:</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mf">6.12</span><span class="p">]</span>
</span><span class="line"><span class="p">})</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">plot_total_numbers</span><span class="p">(</span><span class="n">pbe_solutions</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span> <span class="n">analytical</span><span class="p">):</span>
</span><span class="line">    <span class="n">totals</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">(</span>
</span><span class="line">        <span class="p">(</span>
</span><span class="line">            <span class="n">n</span><span class="p">,</span>
</span><span class="line">            <span class="p">[</span><span class="nb">sum</span><span class="p">(</span><span class="n">Ns</span><span class="p">)</span> <span class="k">for</span> <span class="n">Ns</span> <span class="ow">in</span> <span class="n">pbe_solutions</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">.</span><span class="n">N</span><span class="p">]</span>
</span><span class="line">        <span class="p">)</span> <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="n">breakup_solutions</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">    <span class="n">v</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="n">Na</span> <span class="o">=</span> <span class="p">[</span><span class="n">analytical</span><span class="p">(</span><span class="n">t</span><span class="p">)</span> <span class="k">for</span> <span class="n">t</span> <span class="ow">in</span> <span class="n">time</span><span class="p">]</span>
</span><span class="line">    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class="line">    <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">gca</span><span class="p">()</span>
</span><span class="line">    <span class="n">linestyles</span> <span class="o">=</span> <span class="n">cycle</span><span class="p">([</span><span class="s">&#39;-&#39;</span><span class="p">,</span> <span class="s">&#39;--&#39;</span><span class="p">,</span> <span class="s">&#39;:&#39;</span><span class="p">])</span>
</span><span class="line">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">totals</span><span class="p">):</span>
</span><span class="line">        <span class="n">ax</span><span class="o">.</span><span class="n">loglog</span><span class="p">(</span>
</span><span class="line">            <span class="n">time</span><span class="p">,</span> <span class="n">totals</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">/</span><span class="n">totals</span><span class="p">[</span><span class="n">n</span><span class="p">][</span><span class="mi">0</span><span class="p">],</span>
</span><span class="line">            <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span>
</span><span class="line">            <span class="n">linestyle</span><span class="o">=</span><span class="nb">next</span><span class="p">(</span><span class="n">linestyles</span><span class="p">),</span>
</span><span class="line">            <span class="n">label</span><span class="o">=</span><span class="s">&quot;MOC with N={0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">loglog</span><span class="p">(</span><span class="n">time</span><span class="p">,</span> <span class="n">Na</span> <span class="o">/</span> <span class="n">Na</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="s">&quot;-k&quot;</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">4</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;Analytical&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">&#39;upper left&#39;</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">&#39;Time&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">&quot;Total number of particles $N/N_0$&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">plot_pbe_solutions</span><span class="p">(</span><span class="n">pbe_solutions</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span> <span class="n">analytical</span><span class="p">,</span> <span class="n">initial</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
</span><span class="line">    <span class="n">v</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mf">1e-2</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class="line">    <span class="n">sol</span> <span class="o">=</span> <span class="n">analytical</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">time</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">])</span>
</span><span class="line">
</span><span class="line">    <span class="n">fig</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">()</span>
</span><span class="line">    <span class="n">ax</span> <span class="o">=</span> <span class="n">fig</span><span class="o">.</span><span class="n">gca</span><span class="p">()</span>
</span><span class="line">    <span class="n">markers</span> <span class="o">=</span> <span class="n">cycle</span><span class="p">([</span><span class="s">&#39;o&#39;</span><span class="p">,</span> <span class="s">&#39;s&#39;</span><span class="p">,</span> <span class="s">&#39;v&#39;</span><span class="p">,</span> <span class="s">&#39;*&#39;</span><span class="p">,</span> <span class="s">&#39;.&#39;</span><span class="p">,</span> <span class="s">&#39;,&#39;</span><span class="p">])</span>
</span><span class="line">    <span class="k">for</span> <span class="n">n</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">pbe_solutions</span><span class="p">):</span>
</span><span class="line">        <span class="n">ax</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span>
</span><span class="line">            <span class="n">pbe_solutions</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">.</span><span class="n">xi</span><span class="p">,</span> <span class="n">pbe_solutions</span><span class="p">[</span><span class="n">n</span><span class="p">]</span><span class="o">.</span><span class="n">N</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">/</span> <span class="p">(</span><span class="n">vmax</span><span class="o">/</span><span class="n">n</span><span class="p">),</span> <span class="s">&quot;+&quot;</span><span class="p">,</span>
</span><span class="line">            <span class="n">marker</span><span class="o">=</span><span class="nb">next</span><span class="p">(</span><span class="n">markers</span><span class="p">),</span>
</span><span class="line">            <span class="n">label</span><span class="o">=</span><span class="s">&quot;MOC with N={0}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
</span><span class="line">    <span class="k">if</span> <span class="n">initial</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">:</span>
</span><span class="line">        <span class="n">ax</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">initial</span><span class="p">(</span><span class="n">v</span><span class="p">),</span> <span class="s">&quot;--k&quot;</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;Initial condition&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">semilogy</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">sol</span><span class="p">,</span> <span class="s">&quot;-k&quot;</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">&quot;Analytical&quot;</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">legend</span><span class="p">(</span><span class="n">loc</span><span class="o">=</span><span class="s">&#39;lower left&#39;</span><span class="p">,</span> <span class="n">shadow</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">&#39;Particle volume&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">ax</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">&#39;Number density function&#39;</span><span class="p">)</span>
</span><span class="line">    <span class="n">plt</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h2 id="class-convergence-for-pure-breakup">Class convergence for pure breakup</h2>

<h3 id="analytical-solutions">Analytical solutions</h3>

<p>Ziff and Mc Grady (1985) study several different breakup kernels. In here we
focus on their case number 4 which corresponds to a uniform binary breakup.
Their equations after reformulations to our formalism are:</p>

<script type="math/tex; mode=display">\begin{gather}
\beta(v, v') = \frac{2}{v'},
\\
\Gamma(v) = v^2.
\end{gather}</script>

<p>The uniform aspect is achieved by daughter particle distribution depending only
on the size of a drop which breaks up i.e. $v’$ i.e. it does not depend on the
smaller drop size. Factor of two comes from counting breakage into an ordered
pair $(v, v’-v)$ and $(v’-v, v)$ separately. Alternatively, you can see the
factor as normalisation as $\beta$ has to integrate to the number of drops
produced in the breakage.</p>

<p>The continuous equations then takes the form</p>

<script type="math/tex; mode=display">\begin{gather}
\frac{\partial n(v,t)}{\partial t} = -v^2 n(v,t)  + 2\int_v^ \infty v' n(v', t) \mathrm{d} v'.
\end{gather}</script>

<p>Ziff and McGrady report the solution to a <em>monodisperse</em> configuration i.e.
$n(v, 0) = \delta(v - v_0)$ where $v_0$ is fixed. In discrete formulation this
will resolve to $N_k(0) = 1$ for $k$ being an interval such that $v_0 \in [v_k,
v_{k+1})$. The solution takes the form:</p>

<script type="math/tex; mode=display">% &lt;![CDATA[
\begin{equation}
n(v, t) = \left\{
\begin{array}{lr}
2tv_0 e^{-tv^2} & v < v_0
\\
\delta(v - v_0) e^{-tv_0^2} & v = v_0
\\
0 & v > v_0
\end{array}
\right.
\end{equation} %]]&gt;</script>

<p>Here’s my implementation of this solution with the use of neat
<code>numpy.piecewise</code> function. I wasn’t sure how to represent Dirac’s delta in the
formulation.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">zm_pbe_solution</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">v0</span><span class="p">):</span>
</span><span class="line">    <span class="k">return</span> <span class="n">piecewise</span><span class="p">(</span>
</span><span class="line">        <span class="n">x</span><span class="p">,</span>
</span><span class="line">        <span class="p">[</span><span class="n">x</span> <span class="o">&lt;</span> <span class="n">v0</span><span class="p">,</span> <span class="n">x</span> <span class="o">==</span> <span class="n">v0</span><span class="p">,</span> <span class="n">x</span> <span class="o">&gt;</span> <span class="n">v0</span><span class="p">],</span>
</span><span class="line">        <span class="p">[</span>
</span><span class="line">            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">t</span> <span class="o">*</span> <span class="n">v0</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">t</span> <span class="o">*</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span>
</span><span class="line">            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">v0</span> <span class="o">*</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> <span class="o">*</span> <span class="mi">1000</span><span class="p">,</span>
</span><span class="line">            <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="mf">0.0</span>
</span><span class="line">        <span class="p">]</span>
</span><span class="line">    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>In order to validate the total number of particles we have to integrate that
solution over all sizes.</p>

<script type="math/tex; mode=display">\begin{equation}
N(t) = \int_0^\infty \! n(v, t) \, \mathrm{d} v
=
e^{-tv_0^2} + 
\int_0^\infty 2tv_0 e^{-tv^2} \, \mathrm{d} v
\end{equation}</script>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="k">def</span> <span class="nf">zm_total_number_solution</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span> <span class="n">resolution</span><span class="o">=</span><span class="mi">1000</span><span class="p">):</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="n">linspace</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span> <span class="n">resolution</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">t</span> <span class="o">*</span> <span class="n">v0</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span> \
</span><span class="line">        <span class="o">+</span> <span class="n">trapz</span><span class="p">(</span><span class="mf">2.0</span> <span class="o">*</span> <span class="n">t</span> <span class="o">*</span> <span class="n">v0</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">t</span> <span class="o">*</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span><span class="p">),</span> <span class="n">x</span><span class="o">=</span><span class="n">x</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="numerical-solutions">Numerical solutions</h4>
<p>We solve the population balance problem for pure breakup. We assume an
mono-dispersed initial distribution of size $v_0=1$ and we allow it to breakup
for 10s. We take 10, 20, 40, 80 and 160 classes for that setup.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">v0</span><span class="o">=</span><span class="mf">1.0</span>
</span><span class="line"><span class="n">time</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mf">10.0</span><span class="p">,</span> <span class="mf">0.001</span><span class="p">)</span>
</span><span class="line"><span class="n">grids</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">160</span><span class="p">]</span>
</span><span class="line">
</span><span class="line"><span class="n">breakup_solutions</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class="line"><span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">grids</span><span class="p">:</span>
</span><span class="line">    <span class="n">N0</span> <span class="o">=</span> <span class="n">zeros</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">N0</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="o">=</span> <span class="mi">1</span>
</span><span class="line">    <span class="n">breakup_solutions</span><span class="p">[</span><span class="n">g</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOCSolution</span><span class="p">(</span>
</span><span class="line">        <span class="n">N0</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">v0</span> <span class="o">/</span> <span class="n">g</span><span class="p">,</span>
</span><span class="line">        <span class="n">beta</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="mf">2.0</span> <span class="o">/</span> <span class="n">y</span><span class="p">,</span>
</span><span class="line">        <span class="n">gamma</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="o">**</span><span class="mi">2</span>
</span><span class="line">    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>Finally we plot the results on log, log axes. The total numbers are normalised with respect to initial total number.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">plot_total_numbers</span><span class="p">(</span>
</span><span class="line">    <span class="n">breakup_solutions</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span>
</span><span class="line">    <span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">zm_total_number_solution</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">v0</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://robertsawko.github.io/images/intro_pbe-pure_breakup_N.png" title="'Pure breakup total number solution'" /></p>

<p>A clear convergence to the analytical solution is visible. The figure reveals
that the numerical solutions contain fewer drops then the analytical solutions.
This is due to the fact that the smallest class continues to break up but there
are no smaller classes represented in the discrete form so the drops are
vanishing. In the end all numerical solutions will depart from the analytical
curve due to that lower limit. This behaviour is already visible for $N=10$
case.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">plot_pbe_solutions</span><span class="p">(</span>
</span><span class="line">    <span class="n">breakup_solutions</span><span class="p">,</span> <span class="n">time</span><span class="p">,</span> <span class="n">v0</span><span class="p">,</span>
</span><span class="line">    <span class="k">lambda</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="n">zm_pbe_solution</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">v0</span><span class="o">=</span><span class="n">v0</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://robertsawko.github.io/images/intro_pbe-pure_breakup_pbe.png" title="'Pure breakup number density solution'" /></p>

<p>Again we observe that there’s a clear convergence to analytical solution. The
visualisation of the right end of the analytical solution is somewhat
problematic as it’s supposed to have a Dirac’s delta value. Don’t know how to
solve presently.</p>

<h3 id="class-convergence-for-pure-agglomeration">Class convergence for pure agglomeration</h3>

<h4 id="analytical-solutions-1">Analytical solutions</h4>

<p>Scott (1968) provided a solution for a pure agglomeration case with three
different coalescence kernels: sum, product and constant. I will only do a
constant here although I intend to add the remaining two into my test suite. In
our formulation Scott’s case is</p>

<script type="math/tex; mode=display">\begin{equation}
Q(v, v') = C
\end{equation}</script>

<p>and the remaining kernels are zero.</p>

<p>Also, Scott assumed two types of initial conditions a dual-dispersed case with
a sum of two Dirac’s deltas and a Gaussian-like distribution. In this study we
will only use the latter. We use a special form of it which corresponds to
setting $\nu=1$ and $a=1$ from Scott’s formulation:</p>

<script type="math/tex; mode=display">\begin{equation}
n(v, 0) = \frac{N_0}{v_2} \left(\frac{v}{v_2}\right) e^{-v/v_2}.
\end{equation}</script>

<p>It is important to observe here - and this observation cost me three hours of
my life - that the mean volume from that distribution is tied to $v_2$ by
$v_0 = 2v_2$. The analytical solution given by Scott for the total number is
then:</p>

<script type="math/tex; mode=display">\begin{align}
N(t) = \frac{N_0}{T + 2},
\\
T = C N_0 t,
\end{align}</script>

<p>where $T$ is the non-dimensional time. For the number density function the
solution is:</p>

<script type="math/tex; mode=display">\begin{equation}
n(v,t) = \frac{N_0}{v_0}
\frac{4 e^{-2\xi}}{\xi (T+2)^2}
\sum_{k=1}^{\infty} \frac{(2\xi)^{2(k+1)}}{\Gamma(2 (k+1))} \left(\frac{T}{T+2}\right)^k,
\end{equation}</script>

<p>where $\xi = v / v_0$. Below my python implementation of this for a fixed
number of expansion terms.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="kn">from</span> <span class="nn">scipy.special</span> <span class="kn">import</span> <span class="n">gamma</span>
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">scott_total_number_solution3</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">N0</span><span class="o">=</span><span class="mi">1</span><span class="p">):</span>
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="n">C</span> <span class="o">*</span> <span class="n">N0</span> <span class="o">*</span> <span class="n">t</span>
</span><span class="line">    <span class="k">return</span> <span class="mf">2.0</span> <span class="o">*</span> <span class="n">N0</span> <span class="o">/</span> <span class="p">(</span><span class="n">T</span> <span class="o">+</span> <span class="mf">2.0</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="k">def</span> <span class="nf">scott_pbe_solution3</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">N0</span><span class="o">=</span><span class="mf">1.0</span><span class="p">,</span> <span class="n">v0</span><span class="o">=</span><span class="mf">1.0</span><span class="p">):</span>
</span><span class="line">    <span class="n">T</span> <span class="o">=</span> <span class="n">C</span> <span class="o">*</span> <span class="n">N0</span> <span class="o">*</span> <span class="n">t</span>
</span><span class="line">    <span class="n">x</span> <span class="o">=</span> <span class="n">v</span> <span class="o">/</span> <span class="n">v0</span>
</span><span class="line">    <span class="n">phi3</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">([</span>
</span><span class="line">        <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">/</span> <span class="n">gamma</span><span class="p">(</span><span class="mi">2</span> <span class="o">*</span> <span class="p">(</span><span class="n">k</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span> <span class="o">*</span> <span class="p">(</span><span class="n">T</span><span class="o">/</span><span class="p">(</span><span class="n">T</span><span class="o">+</span><span class="mi">2</span><span class="p">))</span><span class="o">**</span><span class="n">k</span>
</span><span class="line">        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">100</span><span class="p">)</span>
</span><span class="line">        <span class="p">])</span> <span class="o">*</span> <span class="mf">4.0</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span> <span class="mi">2</span> <span class="o">*</span> <span class="n">x</span><span class="p">)</span> <span class="o">/</span> <span class="p">(</span><span class="n">x</span> <span class="o">*</span> <span class="p">(</span><span class="n">T</span> <span class="o">+</span> <span class="mi">2</span><span class="p">)</span><span class="o">**</span><span class="mi">2</span><span class="p">)</span>
</span><span class="line">    <span class="k">return</span> <span class="n">N0</span> <span class="o">/</span> <span class="n">v0</span> <span class="o">*</span> <span class="n">phi3</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="numerical-solutions-1">Numerical solutions</h4>
<p>Similarly to previous section we set five different grids and a simulation
time. We set the simulation time to be smaller as the particles will keep
increasing its size and therefore can leave our uniform grid if enough time has
passed. <code>vmax</code> is set only for visualisation purpose.</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
</pre></td><td class="code"><pre><code class="python"><span class="line"><span class="n">t</span> <span class="o">=</span> <span class="n">arange</span><span class="p">(</span><span class="mf">0.0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">)</span>
</span><span class="line"><span class="n">vmax</span> <span class="o">=</span> <span class="mf">1e1</span>
</span><span class="line"><span class="n">v2</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class="line"><span class="n">N0</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class="line"><span class="n">grids</span> <span class="o">=</span> <span class="p">[</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">40</span><span class="p">,</span> <span class="mi">80</span><span class="p">,</span> <span class="mi">160</span><span class="p">]</span>
</span><span class="line"><span class="n">C</span> <span class="o">=</span> <span class="mf">1.0</span>
</span><span class="line">
</span><span class="line"><span class="n">coalescence_solutions</span> <span class="o">=</span> <span class="nb">dict</span><span class="p">()</span>
</span><span class="line"><span class="k">for</span> <span class="n">g</span> <span class="ow">in</span> <span class="n">grids</span><span class="p">:</span>
</span><span class="line">    <span class="n">dv</span> <span class="o">=</span> <span class="n">vmax</span> <span class="o">/</span> <span class="n">g</span>
</span><span class="line">    <span class="n">v</span> <span class="o">=</span> <span class="n">dv</span> <span class="o">+</span> <span class="n">dv</span> <span class="o">*</span> <span class="n">arange</span><span class="p">(</span><span class="n">g</span><span class="p">)</span>
</span><span class="line">    <span class="n">Ninit</span> <span class="o">=</span> <span class="p">(</span><span class="n">N0</span> <span class="o">/</span> <span class="n">v2</span><span class="p">)</span> <span class="o">*</span> <span class="p">(</span><span class="n">v</span> <span class="o">/</span> <span class="n">v2</span><span class="p">)</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">v</span> <span class="o">/</span> <span class="n">v2</span><span class="p">)</span> <span class="o">*</span> <span class="n">dv</span>
</span><span class="line">    <span class="n">coalescence_solutions</span><span class="p">[</span><span class="n">g</span><span class="p">]</span> <span class="o">=</span> <span class="n">MOCSolution</span><span class="p">(</span>
</span><span class="line">        <span class="n">Ninit</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">dv</span><span class="p">,</span>
</span><span class="line">        <span class="n">Q</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">:</span> <span class="n">C</span>
</span><span class="line">    <span class="p">)</span>
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="n">plot_total_numbers</span><span class="p">(</span>
</span><span class="line">    <span class="n">coalescence_solutions</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span>
</span><span class="line">    <span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">scott_total_number_solution3</span><span class="p">(</span><span class="n">t</span><span class="p">,</span> <span class="n">v2</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://robertsawko.github.io/images/intro_pbe-pure_coalescence_N.png" title="'Pure coalescence total number solution'" /></p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="python"><span class="line">    <span class="n">plot_pbe_solutions</span><span class="p">(</span>
</span><span class="line">        <span class="n">coalescence_solutions</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">vmax</span><span class="p">,</span>
</span><span class="line">        <span class="k">lambda</span> <span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">:</span> <span class="n">scott_pbe_solution3</span><span class="p">(</span><span class="n">v</span><span class="p">,</span> <span class="n">t</span><span class="p">,</span> <span class="n">C</span><span class="o">=</span><span class="n">C</span><span class="p">,</span> <span class="n">N0</span><span class="o">=</span><span class="n">N0</span><span class="p">,</span> <span class="n">v0</span><span class="o">=</span><span class="mi">2</span><span class="o">*</span><span class="n">v2</span><span class="p">),</span>
</span><span class="line">        <span class="k">lambda</span> <span class="n">v</span><span class="p">:</span> <span class="n">N0</span><span class="o">/</span><span class="n">v2</span> <span class="o">*</span> <span class="n">v</span><span class="o">/</span><span class="n">v2</span> <span class="o">*</span> <span class="n">exp</span><span class="p">(</span><span class="o">-</span><span class="n">v</span><span class="o">/</span><span class="n">v2</span><span class="p">)</span>
</span><span class="line">    <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><img class="center" src="http://robertsawko.github.io/images/intro_pbe-pure_coalescence_pbe.png" title="'Pure coalescence number density solution'" /></p>

<h2 id="summary">Summary</h2>

<p>So far we can see that we have convergence to the analytical solutions. The
number of classes though had to be large in comparison with what we can
feasibly support in a CFD code. If method of classes is to be applied in
two-fluid model it would mean solving an additional $N$ transport equations
where $N$ is the number of classes and this has to be multiplied by a number of
cells which probably limit our applicability to around 40 classes. The would
represent a very accurate but also computationally expensive solution to the
problem of population balance. This is why there is interest in developing
special discretisation strategies or various methods of moments. Book by
Marchiso and Fox reviews many of these other approaches. Method of classes
though could be used as a validation test.</p>

<p>This page is still work in progress. I intend to include:</p>

<ul>
  <li>more explanations and context,</li>
  <li>discussion on the challenges of PBE,</li>
  <li>simultaneous breakup and coalescence based on Blatz and Tobolsky,</li>
  <li>moment evolution.</li>
</ul>

<p>The page acts as demonstration of the code that is being developed in <a href="https://github.com/robertsawko/pyfd">pyfd repository</a>.</p>

<h2 id="references">References</h2>

<ol class="bibliography"><li><span id="Smoluchowski1916">Smoluchowski, M. V. (1916). Drei Vortrage uber Diffusion, Brownsche Bewegung und Koagulation von Kolloidteilchen. <i>Zeitschrift Fur Physik</i>, <i>17</i>, 557–585.</span></li>
<li><span id="Hidy1965">Hidy, G. M., &amp; Brock, J. R. (1965). Some remarks about the coagulation of aerosol particles by Brownian motion . <i>Journal Of Colloid Science </i>, <i>20</i>(6), 477–491. doi:http://dx.doi.org/10.1016/0095-8522(65)90030-9</span></li>
<li><span id="Scott1968">Scott, W. (1968). Analytic Studies of Cloud Droplet Coalescence I. <i>Journal Of Atmospheric Studies</i>, <i>25</i>, 54–65.</span></li>
<li><span id="Ziff1985">Ziff, R. M., &amp; McGrady, E. D. (1985). The kinetics of cluster fragmentation and depolymerisation. <i>Journal Of Physics A: Mathematical and General</i>, <i>18</i>(15), 3027. Retrieved from http://stacks.iop.org/0305-4470/18/i=15/a=026</span></li>
<li><span id="Kumar1996">Kumar, S., &amp; Ramkrishna, D. (1996). On the solution of population balance equations by discretization—I. A fixed pivot technique. <i>Chemical Engineering Science</i>, <i>51</i>(8), 1311–1332.</span></li>
<li><span id="Solsvik2015">Solsvik, J., &amp; Jakobsen, H. A. (2015). The Foundation of the Population Balance Equation: A Review. <i>Journal Of Dispersion Science and Technology</i>, <i>36</i>(4), 510–520. doi:10.1080/01932691.2014.909318</span></li></ol>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[It Is Alive!]]></title>
    <link href="http://robertsawko.github.io/blog/2015/04/30/it-is-alive/"/>
    <updated>2015-04-30T20:41:25+01:00</updated>
    <id>http://robertsawko.github.io/blog/2015/04/30/it-is-alive</id>
    <content type="html"><![CDATA[<p>This is my first post using <a href="http://octopress.org/">octopress</a> i.e. a git based
blogging engine. At the moment I am just testing various functionalities. Is
markdown <strong>bold</strong> working? Do we have MathJax?</p>

<h2 id="the-quest-for-mathjax">The quest for MathJax</h2>

<p>Let’s try the Boltzmann equation:</p>

<script type="math/tex; mode=display">\begin{equation}
\frac{\partial f}{\partial t} 
+ \frac{\mathbf{p}}{m} \cdot \nabla f
+ \mathbf{F} \cdot \frac{\partial f}{\partial \mathbf{p}}
=
{\left(\frac{\partial f}{\partial t} \right)}_{\mathrm{collision}}
\end{equation}.</script>

<p>To test inline maths we will use $x^2+y^2=z^2$ where $x$, $y$ are catheti
and $z$ is a hypotenuse of a right triangle.</p>

<p>It works! Although to be truthful it did not work out-of-the-box. I had to
fight a small battle messing around with some files. At the moment I am using
<code>kramdown</code> and CDN according to advice given on this
<a href="http://www.idryman.org/blog/2012/03/10/writing-math-equations-on-octopress/">post</a>.
The only difference is that my <em>javascript</em> code landed in</p>

<p><code>source/_includes/custom/head.html</code></p>

<p>as it is being sourced by the main head anyway. This looks like a slightly
cleaner solution.</p>

<p>But that wasn’t enough! After uploading the files on Github Pages they wouldn’t
display even though I could see them in the preview mode. The reason was the
HTTP secure access to MathJax. It’s important that CDN address contains <code>https</code>
rather than <code>http</code>. There’s a
<a href="http://docs.mathjax.org/en/latest/start.html#secure-cdn-access">passage</a> in
MathJax documentation about it. So much for “setting up a scientific blog in
half-an-hour”, but I’ve learnt a few things definitely.</p>

<p>MathJax test passed.</p>

<h2 id="the-plan">The plan…</h2>

<p>… is to run this as a little experiment in curiosity, amusement and memory of
all these little intellectual pursuits which somehow get lost in the daily
routine of existence. I would like to focus here on the work I do related to
fluid dynamics and coding but other content may appear too. The first few steps
though I need make is to investigate:</p>

<ul>
  <li>adding sub-pages,</li>
  <li>add contact info,</li>
  <li>test iPython integration,</li>
  <li>check comment functionalities (in the unlikely case someone wants to
comment!),</li>
  <li>theme customization.</li>
</ul>

<p>Interestingly at this stage the lists were <strong>not</strong> indented properly. Again, I
found the
<a href="http://stackoverflow.com/questions/24794024/markdown-list-does-not-indent-using-octopress">instructions</a>
which fixed it though. During the whole process I was struck by the fact that I
am overwhelmed by the technological nomenclature. There are lots of concepts
here I completely don’t understand or just heard about for the very first time.
Hopefully this will become less of an impediment as time goes on.</p>

<p>The first actual post to appear is going to be on the introduction to Kraichnan
theory of turbulence which I am reading about at the moment. Will try to
reproduce some of the results and test iPython integration. Future posts may
cover some adventures in population balance modelling, partial differential
with stochastic inputs and fluid dynamics problems.</p>
]]></content>
  </entry>
  
</feed>
